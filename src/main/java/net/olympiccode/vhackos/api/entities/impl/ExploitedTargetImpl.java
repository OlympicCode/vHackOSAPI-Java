package net.olympiccode.vhackos.api.entities.impl;

import lombok.Getter;
import net.olympiccode.vhackos.api.exceptions.ExploitFailedException;
import net.olympiccode.vhackos.api.network.ExploitedTarget;
import net.olympiccode.vhackos.api.requests.Route;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

@Getter
public class ExploitedTargetImpl implements ExploitedTarget {

    private long level = -1;
    private final vHackOSAPIImpl api;
    private final String ip;
    private String username = null;
    private Banking banking;
    private String SystemLog;
    public ExploitedTargetImpl(vHackOSAPIImpl api, String ip) throws ExploitFailedException {
        JSONObject object = Route.Network.REMOTE.compile(api, ip).getResponse().getJSON();
        this.api = api;
        this.ip = ip;
        try {
            int level = object.getInt("remoteLevel");
            String username = object.getString("remoteUsername");
            this.level = level;
            this.username = username;
        } catch (JSONException e) {
            e.printStackTrace();
        }
        this.banking = new BankingImpl();
        if (level == -1 || username == null) {
            throw new ExploitFailedException("An error ocurred");
        }
    }

    public String getSystemLog() {
      if (SystemLog == null) {
          JSONObject object = Route.Network.GET_LOG.compile(api, ip).getResponse().getJSON();
          try {
              SystemLog = object.getString("logs");
          } catch (JSONException e) {
              e.printStackTrace();
          }
      }
      return SystemLog;
    }

    public boolean clearSystemLog() {
        return setSystemLog("");
    }

    public boolean setSystemLog(String s) {
        JSONObject obj = Route.Network.EDIT_LOG.compile(api, ip, "100", s).getResponse().getJSON();
        return obj.optInt("result", 0) == 2;
    }

    @Getter
    public class BankingImpl implements Banking {
        private boolean bruteForced;
        private long avaliableMoney;
        private int transactionCount;
        private int savings;
        private int total;
        private int maxSavings;
        private List<Transaction> transactions = new ArrayList<>();
        BankingImpl() {
            JSONObject object = Route.Network.REMOTE_BANKING.compile(api, ip).getResponse().getJSON();
            try {
                this.bruteForced = object.getInt("open") == 1;
                this.avaliableMoney = object.optLong("money", 0);
                this.transactionCount = object.optInt("transcount", 0);
                this.savings = object.optInt("savings", 0);
                this.total = object.optInt("total", 0);
                this.maxSavings = object.optInt("maxsavings", 0);
                if (object.has("transactions")) {
                    JSONArray array = object.getJSONArray("transactions");
                    for (int i = 0; i < array.length(); i++) {
                        JSONObject trans = array.getJSONObject(i);
                        transactions.add(new TransactionImpl(trans));
                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        public boolean startBruteForce() {
            JSONObject object = Route.Network.START_BRUTEFORCE.compile(api, ip).getResponse().getJSON();
            try {
                int result = object.getInt("result");
                switch (result) {
                    case 0:
                        return true;
                    case 1:
                        return true;
                    case 2:
                        return false;
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return false;
        }

        public boolean withdraw() {
            if (!isBruteForced() && avaliableMoney < 1) return false;
            JSONObject object = Route.Network.BANKING_RETRIEVE.compile(api, "100", ip).getResponse().getJSON();
            try {
                if (object.has("withdraw") && object.getInt("withdraw") == 1) {
                    avaliableMoney = 0;
                    ((StatsImpl) api.getStats()).setMoney(api.getStats().getMoney() + avaliableMoney);
                    return true;
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return false;
        }

       @Getter
       class TransactionImpl implements Transaction {
            long time;
            String from_ip;
            String to_ip;
            long amount;


            TransactionImpl(JSONObject object) {
                try {
                    time = object.getLong("time") * 1000;
                     from_ip = object.getString("from_ip");
                     to_ip = object.getString("to_ip");
                     amount = object.getLong("amount");
                } catch (JSONException e) {
                    e.printStackTrace();
                }

            }
        }
    }
}
